
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
    <title>@ViewBag.Title - 535 383 3310</title>
    <meta name="description" content="İzmir torbalı ilçesinde emlak ilanları, satılık ve kiralık daire, konut, arsa, işyeri, dükkan, mağaza ve konut ilanlarını bulabileceğiniz torbalının en iyi emlak ilan sitesidir." />
    @*@Styles.Render("~/Content/boots")*@

    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/form")
    @*@Styles.Render("~/Content/ovlcss")*@
    @*@Styles.Render("~/Content/distcss")*@
    @Scripts.Render("~/bundles/modernizr")
   
</head>
<body ng-app="torbaliBurada">
    @Html.Partial("_Header")
    @Html.Partial("_Logo")
    @Html.Partial("_Testere")

    @RenderBody()

    @Html.Partial("_Testere")
    @Html.Partial("_Footer")

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/angular")
    @*@Scripts.Render("~/bundles/ovljss")
    @Scripts.Render("~/bundles/distjs")*@
    @Scripts.Render("~/bundles/boottap")
    @*@Scripts.Render("~/bundles/Sitejs")*@
    @Scripts.Render("~/bundles/DropDownjs")
    @Scripts.Render("~/bundles/imgeffect")
    @RenderSection("scripts", required: false)

    <script>
        //
        (function () {

            'use strict';

            // Feature Test
            if ('querySelector' in document && 'addEventListener' in window && Array.prototype.forEach) {

                // Function to animate the scroll
                var smoothScroll = function (anchor, duration) {

                    // Calculate how far and how fast to scroll
                    var startLocation = window.pageYOffset;
                    var endLocation = anchor.offsetTop;
                    var distance = endLocation - startLocation;
                    var increments = distance / (duration / 16);
                    var stopAnimation;

                    // Scroll the page by an increment, and check if it's time to stop
                    var animateScroll = function () {
                        window.scrollBy(0, increments);
                        stopAnimation();
                    };

                    // If scrolling down
                    if (increments >= 0) {
                        // Stop animation when you reach the anchor OR the bottom of the page
                        stopAnimation = function () {
                            var travelled = window.pageYOffset;
                            if ((travelled >= (endLocation - increments)) || ((window.innerHeight + travelled) >= document.body.offsetHeight)) {
                                clearInterval(runAnimation);
                            }
                        };
                    }
                        // If scrolling up
                    else {
                        // Stop animation when you reach the anchor OR the top of the page
                        stopAnimation = function () {
                            var travelled = window.pageYOffset;
                            if (travelled <= (endLocation || 0)) {
                                clearInterval(runAnimation);
                            }
                        };
                    }

                    // Loop the animation function
                    var runAnimation = setInterval(animateScroll, 16);

                };

                // Define smooth scroll links
                var scrollToggle = document.querySelectorAll('.scroll');

                // For each smooth scroll link
                [].forEach.call(scrollToggle, function (toggle) {

                    // When the smooth scroll link is clicked
                    toggle.addEventListener('click', function (e) {

                        // Prevent the default link behavior
                        e.preventDefault();

                        // Get anchor link and calculate distance from the top
                        var dataID = toggle.getAttribute('href');
                        var dataTarget = document.querySelector(dataID);
                        var dataSpeed = toggle.getAttribute('data-speed');

                        // If the anchor exists
                        if (dataTarget) {
                            // Scroll to the anchor
                            smoothScroll(dataTarget, dataSpeed || 500);
                        }

                    }, false);

                });

            }

        })();
        $(document).ready(function () {

            $('.dropdown-toggle').dropdown();

            $(window).scroll(function () {
                if ($(this).scrollTop() > 100) {
                    $('.scrollToTop').fadeIn();
                } else {
                    $('.scrollToTop').fadeOut();
                }
                $('.scrollToTop').on("click", function (e) {
                    e.preventDefault();
                    $("body, html").animate({ scrollTop: 100 }, 'slow');
                });
            });


            var bLazy = new Blazy({
                breakpoints: [{
                    width: 420// Max-width
                  , src: 'data-src-small'
                }]
      , success: function (element) {
          setTimeout(function () {
              var parent = element.parentNode;
              parent.className = parent.className.replace(/\bloading\b/, '');
          }, 200);
      }
            });
            $('.nav-tabs a').click(function (e) {
                e.preventDefault();
                $(this).tab('show');
            });

            // slide to top of panel-group accordion
            $('.panel-group').on('shown.bs.collapse', function () {
                var panel = $(this).find('.in');
                $('html, body').animate({
                    scrollTop: panel.offset().top + (-60)
                }, 500);
            });

        });
        $(document).on('click', '.navbar-collapse.in', function (e) {
            if ($(e.target).is('a') && $(e.target).attr('class') != 'dropdown-toggle') {
                $(this).collapse('hide');
            }
        });

        window.addEventListener('load', function () {

        });
        (function (w, d, undefined) {
            'use strict';

            /*
             * aliases
             * w: window global object
             * d: document
             * undefined: undefined
             */

            // polyfill
            function polyfill() {
                // return when scrollBehavior interface is supported
                if ('scrollBehavior' in d.documentElement.style) {
                    return;
                }

                /*
                 * globals
                 */
                var Element = w.HTMLElement || w.Element;
                var SCROLL_TIME = 468;

                /*
                 * object gathering original scroll methods
                 */
                var original = {
                    scroll: w.scroll || w.scrollTo,
                    scrollBy: w.scrollBy,
                    scrollIntoView: Element.prototype.scrollIntoView
                };

                /*
                 * define timing method
                 */
                var now = w.performance && w.performance.now
                    ? w.performance.now.bind(w.performance) : Date.now;

                /**
                 * changes scroll position inside an element
                 * @@method scrollElement
                 * @@param {Number} x
                 * @@param {Number} y
                 */
                function scrollElement(x, y) {
                    this.scrollLeft = x;
                    this.scrollTop = y;
                }

                /**
                 * returns result of applying ease math function to a number
                 * @@method ease
                 * @@param {Number} k
                 * @@returns {Number}
                 */
                function ease(k) {
                    return 0.5 * (1 - Math.cos(Math.PI * k));
                }

                /**
                 * indicates if a smooth behavior should be applied
                 * @@method shouldBailOut
                 * @@param {Number|Object} x
                 * @@returns {Boolean}
                 */
                function shouldBailOut(x) {
                    if (typeof x !== 'object'
                        || x.behavior === undefined
                        || x.behavior === 'auto'
                        || x.behavior === 'instant') {
                        // first arg not an object, or behavior is auto, instant or undefined
                        return true;
                    }

                    if (typeof x === 'object'
                        && x.behavior === 'smooth') {
                        // first argument is an object and behavior is smooth
                        return false;
                    }

                    // throw error when behavior is not supported
                    throw new TypeError('behavior not valid');
                }

                /**
                 * finds scrollable parent of an element
                 * @@method findScrollableParent
                 * @@param {Node} el
                 * @@returns {Node} el
                 */
                function findScrollableParent(el) {
                    do {
                        el = el.parentNode;
                    } while (el !== d.body
                        && !(el.clientHeight < el.scrollHeight
                            || el.clientWidth < el.scrollWidth));

                    return el;
                }

                /**
                 * self invoked function that, given a context, steps through scrolling
                 * @@method step
                 * @@param {Object} context
                 */
                function step(context) {
                    // call method again on next available frame
                    context.frame = w.requestAnimationFrame(step.bind(w, context));

                    var time = now();
                    var value;
                    var currentX;
                    var currentY;
                    var elapsed = (time - context.startTime) / SCROLL_TIME;

                    // avoid elapsed times higher than one
                    elapsed = elapsed > 1 ? 1 : elapsed;

                    // apply easing to elapsed time
                    value = ease(elapsed);

                    currentX = context.startX + (context.x - context.startX) * value;
                    currentY = context.startY + (context.y - context.startY) * value;

                    context.method.call(context.scrollable, currentX, currentY);

                    // return when end points have been reached
                    if (currentX === context.x && currentY === context.y) {
                        w.cancelAnimationFrame(context.frame);
                        return;
                    }
                }

                /**
                 * scrolls window with a smooth behavior
                 * @@method smoothScroll
                 * @@param {Object|Node} el
                 * @@param {Number} x
                 * @@param {Number} y
                 */
                function smoothScroll(el, x, y) {
                    var scrollable;
                    var startX;
                    var startY;
                    var method;
                    var startTime = now();
                    var frame;

                    // define scroll context
                    if (el === d.body) {
                        scrollable = w;
                        startX = w.scrollX || w.pageXOffset;
                        startY = w.scrollY || w.pageYOffset;
                        method = original.scroll;
                    } else {
                        scrollable = el;
                        startX = el.scrollLeft;
                        startY = el.scrollTop;
                        method = scrollElement;
                    }

                    // cancel frame when a scroll event's happening
                    if (frame) {
                        w.cancelAnimationFrame(frame);
                    }

                    // scroll looping over a frame
                    step({
                        scrollable: scrollable,
                        method: method,
                        startTime: startTime,
                        startX: startX,
                        startY: startY,
                        x: x,
                        y: y,
                        frame: frame
                    });
                }

                /*
                 * ORIGINAL METHODS OVERRIDES
                 */

                // w.scroll and w.scrollTo
                w.scroll = w.scrollTo = function () {
                    // avoid smooth behavior if not required
                    if (shouldBailOut(arguments[0])) {
                        original.scroll.call(
                            w,
                            arguments[0].left || arguments[0],
                            arguments[0].top || arguments[1]
                        );
                        return;
                    }

                    // LET THE SMOOTHNESS BEGIN!
                    smoothScroll.call(
                        w,
                        d.body,
                        ~~arguments[0].left,
                        ~~arguments[0].top
                    );
                };

                // w.scrollBy
                w.scrollBy = function () {
                    // avoid smooth behavior if not required
                    if (shouldBailOut(arguments[0])) {
                        original.scrollBy.call(
                            w,
                            arguments[0].left || arguments[0],
                            arguments[0].top || arguments[1]
                        );
                        return;
                    }

                    // LET THE SMOOTHNESS BEGIN!
                    smoothScroll.call(
                        w,
                        d.body,
                        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
                        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
                    );
                };

                // Element.prototype.scrollIntoView
                Element.prototype.scrollIntoView = function () {
                    // avoid smooth behavior if not required
                    if (shouldBailOut(arguments[0])) {
                        original.scrollIntoView.call(this, arguments[0] || true);
                        return;
                    }

                    // LET THE SMOOTHNESS BEGIN!
                    var scrollableParent = findScrollableParent(this);
                    var parentRects = scrollableParent.getBoundingClientRect();
                    var clientRects = this.getBoundingClientRect();

                    if (scrollableParent !== d.body) {
                        // reveal element inside parent
                        smoothScroll.call(
                            this,
                            scrollableParent,
                            scrollableParent.scrollLeft + clientRects.left - parentRects.left,
                            scrollableParent.scrollTop + clientRects.top - parentRects.top
                        );
                        // reveal parent in viewport
                        w.scrollBy({
                            left: parentRects.left,
                            top: parentRects.top,
                            behavior: 'smooth'
                        });
                    } else {
                        // reveal element in viewport
                        w.scrollBy({
                            left: clientRects.left,
                            top: clientRects.top,
                            behavior: 'smooth'
                        });
                    }
                };
            }

            if (typeof exports === 'object') {
                // commonjs
                module.exports = { polyfill: polyfill };
            } else {
                // global
                polyfill();
            }
        })(window, document);
    </script>
    <script type="text/javascript">

        $(".menu").slideToggle(750);
        $(window).scroll(function () {
            var sticky = $('.sticky'),
                scroll = $(window).scrollTop();

            if (scroll >= 200) sticky.addClass('fixed');
            else sticky.removeClass('fixed');
        });
        $(function () {
            $('[data-toggle-selector]').on('click', function () {
                $($(this).data('toggle-selector')).slideToggle(750);
            })
        })
        $(document).ready(function () {
            var bLazy = new Blazy({
                breakpoints: [{
                    width: 420// Max-width
                    , src: 'data-src-small'
                }]
                , success: function (element) {
                    setTimeout(function () {
                        // We want to remove the loader gif now.
                        // First we find the parent container
                        // then we remove the "loading" class which holds the loader image
                        var parent = element.parentNode;
                        parent.className = parent.className.replace(/\bloading\b/, '');
                    }, 200);
                }
            });
            //Check to see if the window is top if not then display button
            $(window).scroll(function () {
                if ($(this).scrollTop() > 100) {
                    $('.scrollToTop').fadeIn();
                } else {
                    $('.scrollToTop').fadeOut();
                }
            });
            //Click event to scroll to top
            $('.scrollToTop').click(function () {
                $('html, body').animate({ scrollTop: 0 }, 800);
                return false;
            });
        });
        // add event listener on load
        window.addEventListener('load', function () {
            document.querySelector('.js-scroll-by').addEventListener('click', function (e) {
                e.preventDefault();
                window.scrollBy({ top: 200, left: 0, behavior: 'smooth' });
                // window.document.querySelector('.phone').scrollBy({ top: 400, left: 0, behavior: 'smooth' });
            });
        });
    </script>
</body>
</html>
